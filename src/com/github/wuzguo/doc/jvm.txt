1.类的加载流程
加载 -- 连接（验证，准备，解析） -- 初始化 -- 使用 -- 卸载
1.1加载：查找并装载类型的二进制数据
1.2连接：
    验证，验证文件结构，语义检查，字节码检验，二进制兼容性的验证
    准备，为类分配内存，并将其初始化为默认值
    解析，把类型中的符号引用转换为直接引用
    进入连接阶段
1.3初始化：把类变量（成员变量）初始化为正确初始值

2.自底向上检查类是否已经加载，自底向上检查类是否已加载
custom ClassLoader -- app ClassLoader -- Extension ClassLoader -- Bootstrap ClassLoader
自顶向下尝试加载类，自顶向下尝试加载类。

堆区：new 生成的对象
栈区：方法的局部变量
方法区：类的静态变量

java virtual machine,一次编译到处运行
类装载子系统，全限定名
JVM = 类加载器 + 执行引擎 + 运行时数据区域
程序启动的时候，并不会一次性加载程序所有的class文件，而是根据程序的需要，通过Java
的类加载机制，ClassLoader来动态加载某个class文件到内存当中的，从而只有class文件被
载入到内存之后，才能被其它class所引用。

classLoader层次结构，父子关系。
    Bootstrap ClassLoader 启动类加载器，负责加载Java核心API
            |
            |
            |
            |
    Extension ClassLoader 扩展类加载器，负责加载Java扩展类库 /ext/目录下的所有jar
            |
            |
            |
            |
    app ClassLoader 系统类加载器，负责加载应用程序classpath目录下的所有jar和class文件
    |                 |
    |                 |
    |                 |
    |                 |
Custom ClassLoader    custom classLoader
自定义类加载器
类的加载：将.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法内，然后在
堆区创建一个java.lang.class对象，用来封装类在方法区内的数据结构，并向Java程序员提供了
访问方法区内的数据结构的接口。

类的使用方式：
主动使用：
        创建类的实例，访问某个类或接口的静态变量，对静态变量赋值，调用类的静态方法，
        反射，初始化一个类的子类，Java虚拟机启动时被标明为启动类的类
被动使用：
父类委托机制
1.首先从自己已经加载的类中查询是否已经加载了此类，如果有则直接返回原来已经加载的类。
2.若当前的classLoader的缓存中没有找到被加载的类，就会委托父类加载器去加载，父类加载器
也采用同样的策略，首先检查自己的缓存，然后委托父类的父类去加载，一直到bootStrap ClassLoader
3.当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并把它放入自己的缓存中。

为什么使用父类委托机制：
1.防止重复加载同一个类文件
2.考虑到安全因素：
    如果不使用这种委托机制，那我们就可以用自定义的String来动态替代Java核心api定义的类型，
    这样就会存在有很大的安全隐患，使用父类委托机制，可以避免这种情况，因为String在启动时
    就被Bootstrap ClassLoader加载了，所以用户自定义的ClassLoader无法加载自己写的String.

7.类的卸载
当类被加载，连接和初始化后，类的生命周期就开始了。

加载
连接
初始化
使用
卸载

      运行时数据区
 方法区 java栈 本地方法栈
 堆  程序寄存器

内存回收：
标记回收，
分代回收算法，java堆分为：
新生代                        老年代
eden空间 from survivor空间    to survivor空间

java堆可以物理上不连续，但逻辑上连续。

寄存器，Java虚拟机栈，本地方法栈，Java堆，方法区，运行时常量池
内存泄漏
内存溢出

虚拟机栈，本地方法栈，溢出
方法区，运行时常量池，溢出

垃圾回收器
哪些内存需要回收
什么时候回收
如何回收

3.2.1引用计数算法
每当有一个地方引用它，计数器值就加1，当引用失效时，计数器值就减1；当计数器值为0时，
对象就不可能再被使用了。（很难解决对象循环引用的问题）
3.2.2可达性分析算法
以GC Roots 对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，
当一个对象和GC Roots没有任何引用链相连时，则证明此对象是不可用的。
GC Roots 对象：
虚拟机栈引用的对象
方法区中静态属性引用的对象
方法区中常亮引用的对象
本地方法栈引用的对象

被两次标记，finalize()
3.2.5回收方法区
永久代的垃圾收集：废弃常量和无用的类
无用的类：
1.该类的所有实例都已经被回收，java堆中不存在该类的任何实例
2.加载该类的classLoader已经被回收
3.该类对应的java.lang.class对象没有被引用，无法在任何地方通过反射访问该类的方法。


新生代，一次垃圾回收一般可以回收70%-95%

3.3垃圾回收算法
3.3.1标记回收算法（效率问题）
首先标记，然后清除。清除后留下大量不连续的内存碎片，分配较大对象时，
无法找到连续内存，不得不提前触发另一次垃圾收集动作。

3.3.2复制算法
把内存分为大小相等的两块，每次只使用其中的一块，当这块内存用完了，就把还存活的
对象复制到另一块上面，然后把已使用的这块内存一次清理掉。这样，每次都是对整个半区
进行内存回收。
分配内存时就不用考虑内存碎片的复杂情况，只是这种算法的代价是，可分配的内存只有原来的
一半。

算法改良：
将内存分为一块较大的Eden空间，和两块较小的Survivor空间。每次使用Eden和其中
一块Survivor.当回收时，将Eden和survivor

2018-03-14
jvm运行机制
JVM启动流程
JVM基本结构
内存模型
编译和解释运行的概念

               内存空间
方法区  Java堆  Java栈  本地方法栈 pc寄存器
                                每个线程有一个pc寄存器
方法区：保存装载类的信息，类型的常量池，字段，方法信息
        方法字节码
Java堆：线程共享
新生代      老年代
eden s0 s1 tenured
复制算法

Java栈：线程私有
保存方法的局部变量，操作数，常量池指针
栈上分配
volatile 可以使一个线程修改的变量在
其它线程上可见，不是线程安全的。

保证可见性：
volatile
synchronized
final
指令重排


垃圾回收器

可达性分析算法
新生代一次回收可以回收70%-95%的空间

标记-清除算法，会产生大量不连续的内存碎片
效率问题：标记和清除两个过程的效率都不高

复制算法：新生代使用该算法
可用内存分为大小相等的两块，每次只使用其中的一块
当这块使用完了，就将还存活的对象复制到另一块上面
然后把已使用过的内存空间一次清理掉。
这样每次都可以对整个半区进行内存回收，
内存分配也不用考虑内存碎片的问题。
但是这样只能使用到一半的内存，所以改良后
Java堆
8:1:1 hotspot
分为eden区 survivor1 survivor2
当回收时，将eden和survivor1还存活的对象一次性复制
到survivor2中，最后清理eden和survivor1的内存空间，
也就是，每次新生代中可用的内存空间为整个新生代容量的
90%。

3.3.3标记-整理算法
标记要回收的对象，然后将存活对象向一端移动，然后
直接清理掉端边界以外的内存。

3.3.4分代收集算法
新生代使用复制回收算法
老年代使用标记整理算法，或者标记-清理算法。

Hotspot算法实现
3.4.1枚举根节点
GC 进行时必须停顿所有Java执行线程，分析结果的准确性

新生代，老年代
Java堆
方法区

3.6内存分配与回收策略
eden
新生代GC minor GC
老年代GC Major GC

-xx:pretenureSizeThreshold参数，大于这个值直接分配
到老年代，避免新生代发生大量的内存复制

长期存活的对象将进入老年代
对象age,每minor GC 一次存活下来age+1
回收15次依然存活，则进入老年代
-xx:maxTenuringThreadshold





















